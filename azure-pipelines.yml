trigger:
- main  # Trigger the pipeline when changes are pushed to the 'main' branch

pr:
- '*'

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '36792dfc-ef4d-42b8-b410-868f218b9ba8'
  imageRepositoryFrontend: 'frontend-image'
  imageRepositoryBackend: 'backend-image'
  imageRepositoryNginx: 'nginx-image'
  containerRegistry: 'atelloregistry.azurecr.io'
  dockerfilePathFrontend: 'frontend/Dockerfile'
  dockerfilePathBackend: 'backend/Dockerfile'
  dockerfilePathNginx: 'nginx/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'atelloregistry1995f9d1-auth'
  vmImageName: 'ubuntu-latest'

stages:
- stage: BuildAndPush
  displayName: 'Build and Push Docker Images'
  jobs:
  - job: BuildFrontend
    displayName: 'Build and Push Frontend'
    steps:
    - task: Docker@2
      displayName: 'Build and Push Frontend Docker Image'
      inputs:
        command: 'buildAndPush'
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(containerRegistry)/$(imageRepositoryFrontend)
        dockerfile: $(dockerfilePathFrontend)
        tags: |
          $(tag)
    - upload: manifests
      artifact: manifests

  - job: BuildBackend
    displayName: 'Build and Push Backend'
    steps:
    - task: Docker@2
      displayName: 'Build and Push Backend Docker Image'
      inputs:
        command: 'buildAndPush'
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(containerRegistry)/$(imageRepositoryBackend)
        dockerfile: $(dockerfilePathBackend)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

  - job: BuildNginx
    displayName: 'Build and Push Nginx'
    steps:
    - task: Docker@2
      displayName: 'Build and Push Nginx Docker Image'
      inputs:
        command: 'buildAndPush'
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(containerRegistry)/$(imageRepositoryNginx)
        dockerfile: $(dockerfilePathNginx)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: 'Deploy to Kubernetes'
  jobs:
  - deployment: DeployFrontend
    displayName: 'Deploy Frontend'
    pool:
      vmImage: $(vmImageName)
    environment: 'alejandrotello7cvcreator-3490.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: 'Create imagePullSecret'
            inputs:
              action: 'createSecret'
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
          - task: KubernetesManifest@0
            displayName: 'Deploy Frontend to Kubernetes'
            inputs:
              action: 'deploy'
              manifests: |
                $(Pipeline.Workspace)/manifests/frontend/deployment.yml
                $(Pipeline.Workspace)/manifests/frontend/service.yml
                $(Pipeline.Workspace)/manifests/shared-volume-persistentvolumeclaim.yaml
              imagePullSecrets: |
                $(imagePullSecret)

  - deployment: DeployBackend
    displayName: 'Deploy Backend'
    pool:
      vmImage: $(vmImageName)
    environment: 'alejandrotello7cvcreator-3490.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: 'Create imagePullSecret'
            inputs:
              action: 'createSecret'
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
          - task: KubernetesManifest@0
            displayName: 'Deploy Backend to Kubernetes'
            inputs:
              action: 'deploy'
              manifests: |
                $(Pipeline.Workspace)/manifests/backend/deployment.yml
                $(Pipeline.Workspace)/manifests/backend/service.yml
                $(Pipeline.Workspace)/manifests/shared-volume-persistentvolumeclaim.yaml
              imagePullSecrets: |
                $(imagePullSecret)

  - deployment: DeployNginx
    displayName: 'Deploy Nginx'
    pool:
      vmImage: $(vmImageName)
    environment: 'alejandrotello7cvcreator-3490.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: 'Create imagePullSecret'
            inputs:
              action: 'createSecret'
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
          - task: KubernetesManifest@0
            displayName: 'Deploy Nginx to Kubernetes'
            inputs:
              action: 'deploy'
              manifests: |
                $(Pipeline.Workspace)/manifests/nginx/deployment.yml
                $(Pipeline.Workspace)/manifests/nginx/service.yml
                $(Pipeline.Workspace)/manifests/shared-volume-persistentvolumeclaim.yaml
              imagePullSecrets: |
                $(imagePullSecret)